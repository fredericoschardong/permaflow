// Generated by CoffeeScript 1.6.3
(function() {
  var Call, Emitter, User,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = require('./User');

  Emitter = require('emitter');

  Call = (function(_super) {
    __extends(Call, _super);

    function Call(client, id, callerName) {
      var _this = this;
      this.client = client;
      this.id = id;
      this._removeUser = __bind(this._removeUser, this);
      this._addNewUser = __bind(this._addNewUser, this);
      this._add = __bind(this._add, this);
      this._handleUserResponse = __bind(this._handleUserResponse, this);
      this.unmute = __bind(this.unmute, this);
      this.mute = __bind(this.mute, this);
      this.empty = __bind(this.empty, this);
      this.end = __bind(this.end, this);
      this.releaseLocalStream = __bind(this.releaseLocalStream, this);
      this.setLocalStream = __bind(this.setLocalStream, this);
      this.add = __bind(this.add, this);
      this.decline = __bind(this.decline, this);
      this.answer = __bind(this.answer, this);
      this._users = {};
      if (callerName) {
        this._add(callerName);
        this.caller = this.user(callerName);
      }
      this.client.io.on("" + this.id + ":end", function() {
        _this.empty();
        return _this.emit("end");
      });
      this.client.io.on("" + this.id + ":userAdded", this._addNewUser);
    }

    Call.prototype.answer = function() {
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      this.client.io.emit("" + this.id + ":callResponse", true);
      this.client.emit("callAnswered", this);
      this.caller.createConnection();
      this.caller.addLocalStream(this.localStream);
      this.caller.once("sdp", this.caller.sendAnswer);
      return this;
    };

    Call.prototype.decline = function() {
      this.client.io.emit("" + this.id + ":callResponse", false);
      this.client.emit("callDeclined", this);
      return this;
    };

    Call.prototype.add = function(name) {
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      this._add(name);
      this.client.io.emit("addUser", this.id, name, this._handleUserResponse(this.user(name)));
      return this.user(name);
    };

    Call.prototype.user = function(name) {
      return this._users[name];
    };

    Call.prototype.users = function() {
      return this._users;
    };

    Call.prototype.setLocalStream = function(stream) {
      this.localStream = stream;
      return this;
    };

    Call.prototype.releaseLocalStream = function() {
      var _ref;
      if ((_ref = this.localStream) != null) {
        _ref.stop();
      }
      delete this.localStream;
      return this;
    };

    Call.prototype.end = function() {
      var _this = this;
      this.client.io.emit("endCall", this.id, function(err) {
        if (err != null) {
          return _this.emit("error", err);
        }
      });
      return this;
    };

    Call.prototype.empty = function() {
      var name, user, _i, _len, _ref;
      _ref = this.users();
      for (user = _i = 0, _len = _ref.length; _i < _len; user = ++_i) {
        name = _ref[user];
        this._removeUser(user);
      }
      return this;
    };

    Call.prototype.mute = function() {
      var track, _i, _len, _ref;
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = false;
      }
      return this;
    };

    Call.prototype.unmute = function() {
      var track, _i, _len, _ref;
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = true;
      }
      return this;
    };

    Call.prototype._handleUserResponse = function(user) {
      var _this = this;
      return function(err) {
        if (err != null) {
          if (err === "Call declined") {
            user.accepted = false;
            user.emit("declined");
            _this.emit("userDeclined", user);
          } else {
            user.emit("error", err);
            _this.emit("error", err);
          }
        } else {
          user.accepted = true;
          user.emit("answered");
          _this.emit("userAnswered", user);
        }
        return _this;
      };
    };

    Call.prototype._add = function(name) {
      var _base;
      if ((_base = this._users)[name] == null) {
        _base[name] = new User(this, name);
      }
      return this;
    };

    Call.prototype._addNewUser = function(name) {
      var user;
      this._add(name);
      user = this.user(name);
      user.createConnection();
      user.addLocalStream(this.localStream);
      user.sendOffer();
      return this;
    };

    Call.prototype._removeUser = function(name) {
      var user;
      user = this.user(name);
      user.closeConnection();
      delete this._users[name];
      return this;
    };

    return Call;

  })(Emitter);

  module.exports = Call;

}).call(this);
