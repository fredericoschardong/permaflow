// Generated by CoffeeScript 1.6.3
(function() {
  var IceCandidate, MediaStream, PeerConnConfig, PeerConnection, SessionDescription, URL, attachStream, browser, getUserMedia, mediaConstraints, processSDPIn, processSDPOut, supported;

  PeerConnection = window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection;

  IceCandidate = window.RTCIceCandidate;

  SessionDescription = window.RTCSessionDescription;

  MediaStream = window.MediaStream || window.webkitMediaStream;

  getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;

  URL = window.URL || window.webkitURL;

  if (getUserMedia != null) {
    getUserMedia = getUserMedia.bind(navigator);
  }

  browser = (navigator.mozGetUserMedia ? 'firefox' : 'chrome');

  supported = (PeerConnection != null) && (getUserMedia != null);

  processSDPOut = function(sdp) {
    return sdp;
  };

  processSDPIn = function(sdp) {
    return sdp;
  };

  attachStream = function(uri, el) {
    var e, _i, _len;
    if (typeof el === "string") {
      return attachStream(uri, document.getElementById(el));
    } else if (el.jquery) {
      el.attr('src', uri);
      for (_i = 0, _len = el.length; _i < _len; _i++) {
        e = el[_i];
        e.play();
      }
    } else {
      el.src = uri;
      el.play();
    }
    return el;
  };

  if (supported) {
    PeerConnConfig = {
      iceServers: [
        {
          url: "stun:stun.l.google.com:19302"
        }, {
          url: "stun:stun1.l.google.com:19302"
        }, {
          url: "stun:stun2.l.google.com:19302"
        }, {
          url: "stun:stun3.l.google.com:19302"
        }, {
          url: "stun:stun4.l.google.com:19302"
        }
      ]
    };
    mediaConstraints = {
      optional: [
        {
          DtlsSrtpKeyAgreement: true
        }, {
          RtpDataChannels: true
        }
      ]
    };
    if (!MediaStream.prototype.getVideoTracks) {
      MediaStream.prototype.getVideoTracks = function() {
        return this.videoTracks;
      };
      MediaStream.prototype.getAudioTracks = function() {
        return this.audioTracks;
      };
    }
    if (!PeerConnection.prototype.getLocalStreams) {
      PeerConnection.prototype.getLocalStreams = function() {
        return this.localStreams;
      };
      PeerConnection.prototype.getRemoteStreams = function() {
        return this.remoteStreams;
      };
    }
    MediaStream.prototype.pipe = function(el) {
      var uri;
      uri = URL.createObjectURL(this);
      attachStream(uri, el);
      return this;
    };
  }

  module.exports = {
    PeerConnection: PeerConnection,
    IceCandidate: IceCandidate,
    SessionDescription: SessionDescription,
    MediaStream: MediaStream,
    getUserMedia: getUserMedia,
    URL: URL,
    attachStream: attachStream,
    processSDPIn: processSDPIn,
    processSDPOut: processSDPOut,
    PeerConnConfig: PeerConnConfig,
    browser: browser,
    supported: supported,
    constraints: mediaConstraints
  };

}).call(this);
