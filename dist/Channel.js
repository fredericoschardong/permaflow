// Generated by CoffeeScript 1.6.3
(function() {
  var Channel, Emitter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Emitter = require('emitter');

  Channel = (function(_super) {
    __extends(Channel, _super);

    Channel.prototype.open = false;

    function Channel(connection, name, options) {
      var _base;
      this.connection = connection;
      this.name = name;
      this.options = options != null ? options : {};
      this.end = __bind(this.end, this);
      this.send = __bind(this.send, this);
      this.connect = __bind(this.connect, this);
      this.setChannel = __bind(this.setChannel, this);
      if ((_base = this.options).reliable == null) {
        _base.reliable = false;
      }
    }

    Channel.prototype.setChannel = function(chan) {
      var _this = this;
      this.dc = chan;
      this.dc.onopen = function() {
        _this.open = true;
        return _this.emit('open');
      };
      this.dc.onclose = function() {
        _this.open = false;
        return _this.emit('end');
      };
      this.dc.onmessage = function(e) {
        return _this.emit('data', JSON.parse(e.data));
      };
      return this;
    };

    Channel.prototype.connect = function() {
      this.setChannel(this.connection.createDataChannel(this.name, this.options));
      return this;
    };

    Channel.prototype.send = function(data) {
      if (this.open) {
        this.dc.send(JSON.stringify(data));
      }
      return this;
    };

    Channel.prototype.end = function() {
      if (this.open) {
        this.dc.close();
      }
      return this;
    };

    return Channel;

  })(Emitter);

  module.exports = Channel;

}).call(this);
