// Generated by CoffeeScript 1.6.3
(function() {
  var Channel, Emitter, User, shims,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  shims = require('./shims');

  Emitter = require('emitter');

  Channel = require('./Channel');

  User = (function(_super) {
    __extends(User, _super);

    User.prototype.connection = null;

    function User(call, name) {
      this.call = call;
      this.name = name;
      this._handleRemoteCandidate = __bind(this._handleRemoteCandidate, this);
      this._handleRemoteSDP = __bind(this._handleRemoteSDP, this);
      this._handleError = __bind(this._handleError, this);
      this.createConnection();
      this.call.client.io.on("" + call.id + ":" + name + ":sdp", this._handleRemoteSDP);
      this.call.client.io.on("" + call.id + ":" + name + ":candidate", this._handleRemoteCandidate);
    }

    User.prototype.createConnection = function() {
      var _this = this;
      this.channels = {};
      this.connection = new shims.PeerConnection(shims.PeerConnConfig, shims.constraints);
      this.connection.onconnecting = function() {
        return _this.emit("connecting");
      };
      this.connection.onopen = function() {
        return _this.emit("connected");
      };
      this.connection.onicecandidate = function(evt) {
        if ((evt != null ? evt.candidate : void 0) != null) {
          return _this.sendCandidate(evt.candidate);
        }
      };
      this.connection.onaddstream = function(evt) {
        return _this.addStream(evt.stream);
      };
      this.connection.onremovestream = function(evt) {
        return _this.removeStream();
      };
      this.connection.oniceconnectionstatechange = this.connection.onicechange = function() {
        if (_this.connection.iceConnectionState === 'disconnected') {
          return _this.closeConnection();
        }
      };
      this.connection.ondatachannel = function(evt) {
        var chan;
        chan = evt.channel;
        _this.channels[chan.label] = new Channel(_this.connection, chan.label).setChannel(chan);
        return _this.emit('data:#{chan.label}', _this.channels[chan.label]);
      };
      return this;
    };

    User.prototype.closeConnection = function() {
      var chan, name, _ref;
      if (this.connection == null) {
        return this;
      }
      _ref = this.channels;
      for (name in _ref) {
        chan = _ref[name];
        chan.end();
      }
      this.connection.close();
      this.connection = null;
      this.channels = null;
      this.emit('disconnected');
      return this;
    };

    User.prototype.addLocalStream = function(stream) {
      this.connection.addStream(stream);
      return this;
    };

    User.prototype.addStream = function(stream) {
      this._ready = true;
      this.stream = stream;
      this.emit("ready", this.stream);
      return this;
    };

    User.prototype.removeStream = function() {
      this.closeConnection();
      return this;
    };

    User.prototype.ready = function(fn) {
      if (this._ready) {
        fn(this.stream);
      } else {
        this.once('ready', fn);
      }
      return this;
    };

    User.prototype.channel = function(name) {
      if (this.channels[name] == null) {
        this.channels[name] = new Channel(this.connection, name);
        this.emit('data:#{name}', this.channels[name]);
      }
      return this.channels[name];
    };

    User.prototype.sendCandidate = function(candidate) {
      return this.call.client.io.emit("sendCandidate", this.call.id, this.name, candidate, this._handleError);
    };

    User.prototype.sendOffer = function() {
      var done, err,
        _this = this;
      done = function(desc) {
        _this.connection.setLocalDescription(desc);
        desc.sdp = shims.processSDPOut(desc.sdp);
        return _this.call.client.io.emit("sendSDPOffer", _this.call.id, _this.name, desc, _this._handleError);
      };
      err = function(e) {
        return _this.emit("error", e);
      };
      this.connection.createOffer(done, err, shims.constraints);
      return this;
    };

    User.prototype.sendAnswer = function() {
      var done,
        _this = this;
      done = function(desc) {
        desc.sdp = shims.processSDPOut(desc.sdp);
        _this.connection.setLocalDescription(desc);
        return _this.call.client.io.emit("sendSDPAnswer", _this.call.id, _this.name, desc, _this._handleError);
      };
      this.connection.createAnswer(done, this._handleError, shims.constraints);
      return this;
    };

    User.prototype._handleError = function(e) {
      if (e != null) {
        return this.emit("error", e);
      }
    };

    User.prototype._handleRemoteSDP = function(desc) {
      var succ,
        _this = this;
      desc.sdp = shims.processSDPIn(desc.sdp);
      succ = function() {
        return _this.emit("sdp");
      };
      this.connection.setRemoteDescription(new shims.SessionDescription(desc), succ, this._handleError);
      return this;
    };

    User.prototype._handleRemoteCandidate = function(candidate) {
      this.emit("candidate", candidate);
      this.connection.addIceCandidate(new shims.IceCandidate(candidate));
      return this;
    };

    return User;

  })(Emitter);

  module.exports = User;

}).call(this);
